{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "88f574bd",
   "metadata": {
    "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
    "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5",
    "execution": {
     "iopub.execute_input": "2024-04-20T15:27:11.920451Z",
     "iopub.status.busy": "2024-04-20T15:27:11.919637Z",
     "iopub.status.idle": "2024-04-20T15:27:16.193683Z",
     "shell.execute_reply": "2024-04-20T15:27:16.192403Z"
    },
    "papermill": {
     "duration": 4.28149,
     "end_time": "2024-04-20T15:27:16.196674",
     "exception": false,
     "start_time": "2024-04-20T15:27:11.915184",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "First 5 rows of train dataset:\n",
      "   id Sex  Length  Diameter  Height  Whole weight  Whole weight.1  \\\n",
      "0   0   F   0.550     0.430   0.150        0.7715          0.3285   \n",
      "1   1   F   0.630     0.490   0.145        1.1300          0.4580   \n",
      "2   2   I   0.160     0.110   0.025        0.0210          0.0055   \n",
      "3   3   M   0.595     0.475   0.150        0.9145          0.3755   \n",
      "4   4   I   0.555     0.425   0.130        0.7820          0.3695   \n",
      "\n",
      "   Whole weight.2  Shell weight  Rings  \n",
      "0          0.1465        0.2400     11  \n",
      "1          0.2765        0.3200     11  \n",
      "2          0.0030        0.0050      6  \n",
      "3          0.2055        0.2500     10  \n",
      "4          0.1600        0.1975      9  \n",
      "\n",
      "Model Accuracy:\n",
      "Root Mean Squared Error (RMSE): 2.0237293747136205\n",
      "R-squared (R2): 0.6013104882981767\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1000x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.linear_model import LinearRegression\n",
    "from sklearn.metrics import mean_squared_error, r2_score\n",
    "from sklearn.preprocessing import StandardScaler\n",
    "\n",
    "# Load data\n",
    "train_df = pd.read_csv(\"/kaggle/input/playground-series-s4e4/train.csv\")\n",
    "test_df = pd.read_csv(\"/kaggle/input/playground-series-s4e4/test.csv\")\n",
    "\n",
    "# Display first 5 rows of dataset\n",
    "print(\"First 5 rows of train dataset:\")\n",
    "print(train_df.head())\n",
    "\n",
    "# Combine train and test data for preprocessing\n",
    "combined_df = pd.concat([train_df, test_df], ignore_index=True)\n",
    "\n",
    "# Encode categorical variables\n",
    "combined_df = pd.get_dummies(combined_df, columns=['Sex'])\n",
    "\n",
    "# Separate features and target variable\n",
    "X = combined_df.drop(columns=['Rings'])\n",
    "y = train_df['Rings']\n",
    "\n",
    "# Standardize features\n",
    "scaler = StandardScaler()\n",
    "X_scaled = scaler.fit_transform(X)\n",
    "\n",
    "# Split the data back into train and test sets\n",
    "X_train, X_test, y_train, y_test = train_test_split(X_scaled[:len(train_df)], y, test_size=0.2, random_state=42)\n",
    "\n",
    "# Train the model\n",
    "model = LinearRegression()\n",
    "model.fit(X_train, y_train)\n",
    "\n",
    "# Make predictions\n",
    "predictions = model.predict(X_test)\n",
    "\n",
    "# Calculate model accuracy and error rate\n",
    "mse = mean_squared_error(y_test, predictions)\n",
    "rmse = np.sqrt(mse)\n",
    "r2 = r2_score(y_test, predictions)\n",
    "\n",
    "print(\"\\nModel Accuracy:\")\n",
    "print(f\"Root Mean Squared Error (RMSE): {rmse}\")\n",
    "print(f\"R-squared (R2): {r2}\")\n",
    "\n",
    "# Plot histogram of target variable\n",
    "plt.figure(figsize=(10, 6))\n",
    "plt.hist(train_df['Rings'], bins=30, color='skyblue', edgecolor='black')\n",
    "plt.title('Histogram of Rings')\n",
    "plt.xlabel('Rings')\n",
    "plt.ylabel('Frequency')\n",
    "plt.grid(True)\n",
    "plt.show()\n",
    "\n",
    "# Save predictions to submission.csv\n",
    "# Round up predictions to 2 decimal places\n",
    "# Ensure predictions array has at least 18123 elements\n",
    "if len(predictions) < 18123:\n",
    "    print(f\"Error: predictions array has only {len(predictions)} elements.\")\n",
    "else:\n",
    "    # Slice predictions array to only include the first 18123 elements\n",
    "    predictions_sliced = predictions[:18123]\n",
    "\n",
    "    # Round up predictions to 2 decimal places\n",
    "    rounded_predictions = np.round_(predictions_sliced, 2)\n",
    "\n",
    "    # Create the submission DataFrame\n",
    "    submission_df = pd.DataFrame({'id': test_df.id[:18123], 'Rings': rounded_predictions})\n",
    "submission_df.to_csv('submission.csv', index=False)\n"
   ]
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "none",
   "dataSources": [
    {
     "databundleVersionId": 8096274,
     "sourceId": 72489,
     "sourceType": "competition"
    }
   ],
   "dockerImageVersionId": 30702,
   "isGpuEnabled": false,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.13"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 8.206966,
   "end_time": "2024-04-20T15:27:16.824481",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2024-04-20T15:27:08.617515",
   "version": "2.5.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
